{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$id": "https://raw.githubusercontent.com/budak7273/ContentLib_Documentation/main/JsonSchemas/CL_Schematic.json",
    "title": "ContentLib Schematic",
    "description": "ContentLib Schematic struct definitions can be made from this JSON, and when converted to JSON, will follow this form.",
    "$comment": "This is NOT a copy-paste template! Check the docs to see how to use this! https://docs.ficsit.app/contentlib/latest/index.html",
    "type": "object",
    "additionalProperties": false,
    "properties": {
        "Name": {
            "type": "string",
            "description": "The in-game name of our schematic, exactly as it is displayed to the user."
        },
        "Type": {
            "type": "string",
            "description": "Determines if the schematic is part of the tutorial system or if it's a Milestone/etc.",
            "enum": [
                "Custom",
                "Cheat",
                "Tutorial",
                "Milestone",
                "Alternate",
                "Story",
                "MAM",
                "ResourceSink",
                "HardDrive",
                "Prototype"
            ],
            "allOf": [
                {
                    "$comment": "The `HardDrive` schematic type is an internal type used just for the 'Scan a Hard Drive' feature. You almost certainly want to use `Alternate` instead.",
                    "if": {
                        "const": "HardDrive"
                    },
                    "then": {
                        "const": "Alternate"
                    }
                }
            ]
        },
        "VisualKit": {
            "type": "string",
            "description": "Name of the Visual Kit to use. If you want to refer to the kit of an existing asset, use its descriptor name, with the _C suffix.",
            "examples": [
                "Schematic_Tutorial5_C",
                "Schematic_1-3_C",
                "Schematic_2-1_C",
                "Kit_MyCustomVisualKitName"
            ]
        },
        "Description": {
            "type": "string",
            "description": "A text description to display along with the schematic. As of Update 5, only AWESOME Shop schematics actually display this field anywhere in-game."
        },
        "Cost": {
            "type": "array",
            "description": "ItemAmounts which form the unlock cost. Nog's Research mod must be used if you want to submit fluid item types. See 'ClearCost' to append cost of replace.",
            "items": {
                "$ref": "./Components/CL_ItemAmount.json"
            }
        },
        "Category": {
            "type": "string",
            "description": "Defines the category in which this schematic gets grouped into. Only AWESOME Shop schematics actually use this field. Either a base-game category, or a string which ContentLib will automatically turn into a category for you.",
            "minLength": 1,
            "examples": [
                "SC_RSS_Parts",
                "MyCustomAutoCreatedCategory"
            ]
        },
        "SubCategories": {
            "type": "array",
            "description": "Defines the Sub-categories in which this schematic gets grouped into. Only AWESOME Shop schematics actually use this field. Either a base-game category, or a string which ContentLib will automatically turn into a category for you. Use ClearSubCategories to wipe this instead of appending.",
            "items": {
                "type": "string",
                "examples": [
                    "SC_RSS_Biomass"
                ]
            }
        },
        "DependsOn": {
            "type": "array",
            "description": "Automatic name resolved asset. Other schematics that this schematic requires to be purchased before it will display. Use ClearDeps to wipe this list instead of appending. How many of these need to be satisfied depends on the asset's mRequireAllSchematicsToBePurchased field (a field not yet directly editable with ContentLib). For newly created Schematics, this is false -> only one needs to be purchased. For patches, it depends on what the asset originally specified (check with Content Inspector). For a patch, you can use ClearDeps to reset mRequireAllSchematicsToBePurchased to be false.",
            "items": {
                "minimum": 1,
                "$ref": "./Components/CL_NameResolvedAsset.json"
            }
        },
        "MenuPriority": {
            "type": "number",
            "description": "Only tested for the HUB and AWESOME Shop. Controls the order that schematics appear within their category. Lower values means earlier in the menu. Negatives and decimals allowed."
        },
        "Time": {
            "type": "number",
            "description": "How long in seconds it takes the ship to return after a HUB Milestone, or a MAM research to complete",
            "minimum": 0
        },
        "Tier": {
            "type": "integer",
            "description": "The numeric tier the schematic is sorted into in the HUB. Unknown if this affects other types of schematic.",
            "minimum": 0
        },
        "InventorySlotsToGive": {
            "type": "integer",
            "description": "Number of inventory slots to award the player with.",
            "minimum": 1
        },
        "ArmSlotsToGive": {
            "type": "integer",
            "description": "Number of hand equipment slots to award the player with.",
            "minimum": 1
        },
        "Recipes": {
            "type": "array",
            "description": "Automatic name resolved asset. Recipes to unlock when the schematic is purchased. Appended to the existing by default, use ClearRecipes to change this.",
            "items": {
                "minimum": 1,
                "$ref": "./Components/CL_NameResolvedAsset.json"
            }
        },
        "Schematics": {
            "type": "array",
            "description": "Automatic name resolved asset. Other schematics to unlock when the schematic is purchased. Note that these have *absolutely no visual representation within the game*, you will have to confirm their successful addition by testing, checking the logs, or using ContentInspector. Appended to the existing by default, use ClearSchematics to change this.",
            "items": {
                "minimum": 1,
                "$ref": "./Components/CL_NameResolvedAsset.json"
            },
            "examples": [
                [
                    "Schematic_Goat"
                ]
            ]
        },
        "ScannableResources": {
            "type": "array",
            "description": "Scannable Resourcess to unlock when the schematic is purchased. Appended to the existing by default, use ClearScannableResources to change this.",
            "items": {
                "minimum": 1,
                "type": "object",
                "additionalProperties": false,
                "required": [
                    "Resource",
                    "NodeType"
                ],
                "properties": {
                    "Resource": {
                        "$ref": "./Components/CL_NameResolvedAsset.json"
                    },
                    "NodeType": {
                        "type": "string",
                        "enum": [
                            "Node",
                            "FrackingSatellite",
                            "FrackingCore",
                            "Geyser"
                        ],
                        "description": "What type of node should be scanned for."
                    }
                }
            },
            "examples": [
                [
                    {
                        "Resource": "Desc_OreGold_C",
                        "NodeType": "Node"
                    }
                ]
            ]
        },
        "ItemsToGive": {
            "type": "array",
            "description": "Items to give the player upon schematic purchase, only tested with Resource Sink (AWESOME Shop) schematics.",
            "items": {
                "minimum": 1,
                "$ref": "./Components/CL_ItemAmount.json"
            }
        },
        "ClearSubCategories": {
            "type": "boolean",
            "description": "When true, the existing Sub Categories of a schematic will be cleared. Used to wipe costs, or entirely replace them with the entries in the SubCategories field."
        },
        "ClearCost": {
            "type": "boolean",
            "description": "When true, the existing unlocks cost entries of a schematic will be cleared. Used to wipe costs, or entirely replace them with the entries in the Cost field."
        },
        "ClearRecipes": {
            "type": "boolean",
            "description": "When true, the existing recipe unlocks of a schematic will be cleared. Used to wipe unlocked recipes, or entirely replace them with the entries in the Recipes field."
        },
        "ClearSchematics": {
            "type": "boolean",
            "description": "When true, the existing schematic unlocks of a schematic will be cleared. Used to wipe unlocked schematics, or entirely replace them with the entries in the Schematics field."
        },
        "ClearScannableResources": {
            "type": "boolean",
            "description": "When true, the existing scannable resource unlocks of a schematic will be cleared. Used to wipe unlocked scannable resource, or entirely replace them with the entries in the ScannableResources field."
        },
        "ClearDeps": {
            "type": "boolean",
            "description": "When true, the existing dependencies of a schematic will be cleared. Used to wipe dependencies, or entirely replace them with the entries in the DependsOn field."
        },
        "ClearItemsToGive": {
            "type": "boolean",
            "description": "When true, the existing item rewards of a schematic will be cleared. Used to wipe item rewards, or entirely replace them with the entries in the ItemsToGive field."
        },
        "ResearchTree": {
            "type": "object",
            "description": "I (Robb) have not investigated this field to find out if it still works. See https://github.com/Nogg-aholic/ContentLib/blob/master/Source/ContentLib/Private/CLSchematicBPFLib.cpp if you want to try it. See ContentLib discord conversation https://discord.com/channels/771801486828896258/864639223599726612/1365851261060124713"
        }
    },
    "allOf": [
        {
            "$comment": "ResearchTree only allowed with Type: MAM",
            "if": {
                "required": [
                    "ResearchTree"
                ]
            },
            "then": {
                "properties": {
                    "Type": {
                        "const": "MAM"
                    }
                }
            }
        }
    ],
    "patternProperties": {
        "schema": {
            "$comment": "Allow the $schema line in files",
            "type": "string"
        },
        "comment": {
            "$comment": "Allow the $comment line in files",
            "type": "string"
        }
    }
}